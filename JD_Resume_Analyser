import streamlit as st
import google.generativeai as genai
import os
import fitz
from dotenv import load_dotenv

# Load environment variables
load_dotenv()
os.getenv("GOOGLE_API_KEY")
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))

def get_gemini_response(input_jd, pdf_content, prompt, query=""):
    model = genai.GenerativeModel('gemini-1.5-flash')
    if query:
        response = model.generate_content([input_jd, pdf_content, prompt, query])
    else:
        response = model.generate_content([input_jd, pdf_content, prompt])
    return response.text

def input_pdf_setup(uploaded_file):
    if uploaded_file is not None:
        document = fitz.open(stream=uploaded_file.read(), filetype="pdf")
        text_parts = []
        for page in document:
            text_parts.append(page.get_text())
        pdf_text_content = " ".join(text_parts)
        return pdf_text_content
    else:
        raise FileNotFoundError("No file uploaded")

# Optimized Prompts
input_prompt1 = """
Role: Experienced Technical Human Resource Manager with expertise in technical evaluations and Recruitment
Task: Review the provided resume against the job description.
Objective: Evaluate whether the candidate's profile aligns with the "Brand Analytics – Data Analyst" role.
Instructions:
1. Input: A job description (JD) for a Brand Analytics – Data Analyst role in Chennai, India (3-7 years experience), and a resume extracted from a PDF.
2. Process: Compare the resume to the JD to assess alignment.
3. Output: Provide:
   - Match percentage between the resume and JD (e.g., "80% match").
   - A professional evaluation (1-2 paragraphs) highlighting strengths (e.g., relevant skills like Python, SQL) and weaknesses (e.g., missing Machine Learning experience).
   - Suggestions for improvement (e.g., "Candidate should highlight Machine Learning skills or gain certification").
   Ensure the response is concise and professional.
"""

input_prompt2 = """
Role: Advanced AI for Technical Recruitment
Task: Generate evaluation questions for the "Brand Analytics – Data Analyst" role.
Objective: Create technical and coding questions based on the JD and resume, sequenced from project start to finish.
Instructions:
1. Input: JD for Brand Analytics – Data Analyst and resume from PDF.
2. Process: Generate up to 10 questions (5 Technical, 5 Coding) in project lifecycle order (requirements, design, development, testing, deployment).
3. Output: For each question, provide:
   - Category: "Technical Question" or "Coding Question".
   - Question: Clear, specific question (e.g., "What statistical methods are used in predictive modeling?").
   - Answer: Detailed answer for recruiters to validate responses.
Example:
Technical Question: "What is the difference between predictive and prescriptive analytics?"
Answer: "Predictive analytics forecasts future outcomes using historical data and statistical models like regression, while prescriptive analytics recommends actions based on those predictions, often using optimization techniques. Look for understanding of tools like Python, R, and business implications."
"""

input_prompt3 = """
Role: ATS Scanner with Domain Expertise
Task: Evaluate resume against JD for domain fit (e.g., Business Analytics).
Objective: Assess compatibility from a domain perspective for the "Brand Analytics – Data Analyst" role.
Instructions:
1. Input: JD and resume.
2. Output: 
   - Match percentage (e.g., "75%") with explanation.
   - Missing keywords (e.g., "Tableau, PowerBI").
   - Ensure evaluation is thorough and objective.
"""

input_prompt4 = """
Role: ATS Scanner with Technical Expertise
Task: Evaluate resume against JD for technical fit.
Objective: Assess compatibility for the "Brand Analytics – Data Analyst" role.
Instructions:
1. Calculate match percentage.
2. Explain match and gaps.
3. Identify missing keywords/skills.
4. Create a table of top 5 skills with required years (JD), candidate years (resume), and relevant projects.
5. Share final thoughts on suitability.
"""

input_prompt5 = """
Role: AI Assistant
Task: Summarize the "Brand Analytics – Data Analyst" JD and provide recruiter recommendations.
Objective: Summarize key details and suggest sourcing strategies.
Instructions:
1. Output two sections:
   - JD Summary: Concise summary (3-5 sentences) of responsibilities, skills (e.g., PySpark, Python), and qualifications.
   - Recommendations: Suggest skill combinations (e.g., "Data Analyst + Statistical Modeler"), keywords (e.g., "SQL, Machine Learning"), and sourcing platforms (e.g., LinkedIn, pharma networks).
2. Keep responses professional and actionable.
"""

input_prompt6 = """
Role: Skill Analyst
Task: Perform a Skill Analysis
Objective: Analyze the provided resume to determine the match status of skills specified by the user.
Instructions:
1. Input: You will receive two pieces of input:
   - A list of top skills provided by the user as a comma-separated string (e.g., "Python, SQL, Machine Learning") via a text input field.
   - A resume extracted from a PDF file, provided as text content, detailing the candidate’s skills, experience, projects, and qualifications.

2. Process: For each skill listed in the user-provided top_skills, perform the following:
   - Check if the skill is explicitly mentioned or implied in the resume (e.g., through job titles, tools used, projects, certifications, or keywords).
   - Estimate the years of experience for each skill by analyzing the duration of relevant roles, projects, or education mentioned in the resume. If no specific duration is provided, estimate based on context (e.g., "recent graduate" = 0-1 year, "senior role" = 3+ years).
   - Identify any relevant projects, roles, or experiences from the resume that demonstrate the use of the skill.

3. Output: Present the results in a clear, structured table format with the following columns:
   - Skill: The specific skill from the user-provided top_skills list (use the exact wording from the input).
   - Match Status: Indicate "Yes" if the skill is present in the resume (either explicitly or implicitly), otherwise "No".
   - Relevant Projects: List any projects, roles, or experiences from the resume that demonstrate the skill (e.g., "Data Analysis Project, Machine Learning Implementation"). If no relevant projects exist, write "None".
   - Years of Experience: Estimate the total years of experience related to the skill based on the resume (e.g., "2 years"). If no experience is found, write "0 years".

4. Additional Notes:
   - Do not reference or extract skills from the job description (JD); only use the skills provided by the user in the top_skills input.
   - The resume text may contain noise (e.g., formatting artifacts from PDF extraction), so focus on key terms and context.
   - If a skill is mentioned but no experience duration is provided, use reasonable assumptions (e.g., "1 year" for junior roles, "3 years" for mid-level).
   - Ensure the output is concise, professional, and easy to read, suitable for display in a Streamlit app.

Example:
If top_skills are "Python, SQL, Machine Learning" and the resume mentions "3 years of Python in Data Science Project" and "1 year of SQL in Database Project," but no Machine Learning, the output table should look like this:

| Skill            | Match Status | Relevant Projects                     | Years of Experience |
|-------------------|--------------|---------------------------------------|---------------------|
| Python           | Yes          | Data Science Project                  | 3 years            |
| SQL              | Yes          | Database Project                      | 1 year             |
| Machine Learning | No           | None                                  | 0 years            |

Now, analyze the user-provided top_skills and resume content to generate the skill analysis table.
"""

input_prompt_query = """
Role: AI Assistant for Recruitment Queries
Task: Answer user queries about JD or resume.
Objective: Provide detailed, context-aware responses.
Instructions:
1. Input: JD, resume, and user query (e.g., "What skills are missing?").
2. Output: Clear response summarizing or comparing JD/resume, with insights (e.g., "Resume lacks Machine Learning; suggest certification").
3. If query is unclear, ask for clarification.
"""

# Streamlit App
st.set_page_config(page_title="Resume Expert")

st.header("JobFit Analyzer")
st.subheader('This Application helps you to evaluate the Resume Review with the Job Description')

input_text = st.text_input("Job Description: ", key="input")
submit7 = st.button("JD Summarization")

uploaded_file = st.file_uploader("Upload your Resume(PDF)...", type=["pdf"])
pdf_content = ""
if uploaded_file is not None:
    st.write("PDF Uploaded Successfully")

submit1 = st.button("Technical Recruiter Analysis")
submit2 = st.button("Technical Questions")
submit3 = st.button("Domain Expert Analysis")
submit4 = st.button("Technical Manager Analysis")
submit5 = st.button("Answer My Query")
top_skills = st.text_input("Top Skills Required for the Job (comma-separated):", key="top_skills")
submit6 = st.button("Skill Analysis")

input_promp = st.text_input("Queries: Feel Free to Ask here", key="query")
submit_query = st.button("Answer My Query")  # Renamed for clarity

if submit1:
    if uploaded_file is not None and input_text:
        pdf_content = input_pdf_setup(uploaded_file)
        response = get_gemini_response(input_text, pdf_content, input_prompt1)
        st.subheader("Technical Recruiter Analysis")
        st.write(response)
    else:
        st.write("Please upload a PDF and enter a Job Description to proceed.")

elif submit2:
    if uploaded_file is not None and input_text:
        pdf_content = input_pdf_setup(uploaded_file)
        response = get_gemini_response(input_text, pdf_content, input_prompt2)
        st.subheader("Technical Questions")
        st.write(response)
    else:
        st.write("Please upload a PDF and enter a Job Description to proceed.")

elif submit3:
    if uploaded_file is not None and input_text:
        pdf_content = input_pdf_setup(uploaded_file)
        response = get_gemini_response(input_text, pdf_content, input_prompt3)
        st.subheader("Domain Expert Analysis")
        st.write(response)
    else:
        st.write("Please upload a PDF and enter a Job Description to proceed.")

elif submit4:
    if uploaded_file is not None and input_text:
        pdf_content = input_pdf_setup(uploaded_file)
        response = get_gemini_response(input_text, pdf_content, input_prompt4)
        st.subheader("Technical Manager Analysis")
        st.write(response)
    else:
        st.write("Please upload a PDF and enter a Job Description to proceed.")

elif submit5:
    if uploaded_file is not None or input_text:
        pdf_content = input_pdf_setup(uploaded_file) if uploaded_file is not None else ""
        response = get_gemini_response(input_text, pdf_content, input_prompt_query, input_promp)
        st.subheader("Query Response")
        st.write(response)
    else:
        st.write("Please upload a PDF or enter a Job Description to proceed.")

elif submit6:
    if uploaded_file is not None and top_skills:
        pdf_content = input_pdf_setup(uploaded_file)
        # Pass empty JD since skills are from user input, not JD
        response = get_gemini_response("", pdf_content, input_prompt6)  # No JD needed
        st.subheader("Top Skill Analysis")
        st.write(response)
    else:
        st.write("Please upload a PDF and enter Top Skills to proceed.")

elif submit7:
    if input_text:
        response = get_gemini_response(input_text, "", input_prompt5)  # No PDF needed for JD summarization
        st.subheader("Job Description Summary")
        st.write(response)
    else:
        st.write("Please enter a Job Description to proceed.")
